{"title":"手撕代码","uid":"66e6fbbf30cdfd5fb293d5ee17ed3935","slug":"手撕代码","date":"2021-10-19T03:41:08.000Z","updated":"2021-10-30T03:54:24.199Z","comments":true,"path":"api/articles/手撕代码.json","keywords":null,"cover":[],"content":"<h4 id=\"iou\">1. IOU</h4>\n<h5 id=\"python\">python</h5>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">def bb_intersection_over_union(boxA, boxB):\n    boxA = [int(x) for x in boxA]\n    boxB = [int(x) for x in boxB]\n\n    xA = max(boxA[0], boxB[0])\n    yA = max(boxA[1], boxB[1])\n    xB = min(boxA[2], boxB[2])\n    yB = min(boxA[3], boxB[3])\n\n    interArea = max(0, xB - xA + 1) * max(0, yB - yA + 1)\n\n    boxAArea = (boxA[2] - boxA[0] + 1) * (boxA[3] - boxA[1] + 1)\n    boxBArea = (boxB[2] - boxB[0] + 1) * (boxB[3] - boxB[1] + 1)\n    \n    iou = interArea / float(boxAArea + boxBArea - interArea)\n\n    return iou<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h5 id=\"c\">c++</h5>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">#include&lt;iostream&gt;\n#include&lt;vector&gt;\n#include&lt;algorithm&gt;\nusing namespace std;\n\ntypedef struct Bbox\n{\n    int x1;\n    int y1;\n    int x2;\n    int y2;\n    float score;\n}Bbox;\n\nfloat iou(Bbox box1,Bbox box2)\n{\n    max_x = max(box1.x1,box2.x1);  // 找出左上角坐标哪个大\n    min_x = min(box1.x2,box2.x2);  // 找出右上角坐标哪个小\n    max_y = max(box1.y1,box2.y1);\n    min_y = min(box1.y2,box2.y2);\n    if(min_x&lt;=max_x || min_y&lt;=max_y) // 如果没有重叠\n        return 0;\n    float over_area = (min_x - max_x) * (min_y - max_y);  // 计算重叠面积\n    float area_a = (box1.x2 - boxa.x1) * (box1.y2 - boxa.y1);\n    float area_b = (box2.x2 - boxb.x1) * (box2.y2 - boxb.y1);\n    float iou = over_area / (area_a + area_b - over_area);\n    return iou;\n}<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"nms\">2. NMS</h4>\n<h5 id=\"python-1\">python</h5>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">def nms(det, thresh):\n    x1 = det[..., 0]\n    y1 = det[..., 1]\n    x2 = det[..., 2]\n    y2 = det[..., 3]\n    scores = det[..., 4]\n    area = (x2 - x1 + 1) * (y2 - y1 + 1)\n    order = np.argsort(scores)[::-1]  # Returns the indices that would sort an array.\n    keep = []\n    while order.size &gt; 0:\n        i = order[0]\n        keep.append(i)\n        xx1 = np.maximum(x1[i], x1[order[1:]])\n        yy1 = np.maximum(y1[i], y1[order[1:]])\n        xx2 = np.minimum(x2[i], x2[order[1:]])\n        yy2 = np.minimum(x2[i], x2[order[1:]])\n        w = np.maximum(0, xx2 - xx1 + 1)\n        h = np.maximum(0, yy2 - yy1 + 1)\n        inter = w * h\n        union = area[i] + area[order[1:]] - inter\n        iou = inter / union\n        next_i = np.where(iou &lt;= thresh)[0]  # 只有条件 (condition)，没有x和y，则输出满足条件 (即非0) 元素的坐标\n        order = order[next_i + 1]\n    return keep<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h5 id=\"c-1\">c++</h5>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">/*\n  将bbx按照confidence从高到低排序\n*/\nbool sort_score(Bbox box1,Bbox box2)\n{\n    return (box1.score &gt; box2.score);\n}\n/*\n(1) 获取当前目标类别下所有bbx的信息\n(2) 将bbx按照confidence从高到低排序,并记录当前confidence最大的bbx\n(3) 计算最大confidence对应的bbx与剩下所有的bbx的IOU,移除所有大于IOU阈值的bbx\n(4) 对剩下的bbx，循环执行(2)和(3)直到所有的bbx均满足要求（即不能再移除bbx）\n*/\nvector&lt;Bbox&gt; nms(vector&lt;Bbox&gt;&amp;vec_boxs, float threshold)\n{\n    vector&lt;Bbox&gt;  res;\n    while(vec_boxs.size() &gt; 0)\n    {\n        sort(vec_boxs.begin(),vec_boxs.end(),cmp);\n        res.push_back(vec_boxs[0]);\n        for(int i =0;i &lt;vec_boxs.size()-1;i++)\n        {\n            float iou_value =iou(vec_boxs[0],vec_boxs[i+1]);\n            if (iou_value &gt;threshold)\n            {\n                vec_boxs.erase(vec_boxs[i+1]);\n            }\n        }\n        vec_boxs.erase(vec_boxs[0]);  // res 已经保存，所以可以将最大的删除了\n \n    }\n    return res;\n}<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"卷积\">3. 卷积</h4>\n<h5 id=\"python-2\">python</h5>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">def conv_naive(x, c_out, ksize=3, padding=0, stride=1):\n    b, c_in, h, w = x.shape\n    kernel = np.random.rand(c_out, c_in, ksize, ksize)\n    out_height = (h - ksize + 2 * padding) // stride + 1\n    out_width = (w - ksize + 2 * padding) // stride + 1\n\n    out_x = np.random.rand(b, c_out, out_height,  out_width)\n    if padding &gt; 0:\n        pad_x = np.zeros((b, c_in, h + 2 * padding, w + 2 * padding))\n        pad_x[..., padding:-padding, padding:-padding] = x\n    else:\n        pad_x = x\n\n    for y in range(out_height):\n        for x in range(out_width):\n            roi = pad_x[..., y * stride:y * stride + ksize, x * stride: x * stride + ksize]\n            conv = np.tile(np.expand_dims(roi, axis=1), (1, c_out, 1, 1, 1)) * kernel\n            # conv = np.repeat(np.expand_dims(roi, axis=1), axis=1, repeats=c_out) * kernel\n            out_x[..., y, x] = np.squeeze(np.sum(conv, axis=(2, 3, 4), keepdims=True), axis=(2, 3, 4))\n\n    return out_x<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h5 id=\"c-2\">c++</h5>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">/二维卷积的实现\n#include&lt;cassert&gt;\n#include&lt;vector&gt;\n\n\nvoid conv2(int** filter, int **mat, int** res, const int filter_rows, const int filter_cols, const int mat_rows, const int mat_cols);//指针数组版本\nstd::vector&lt;std::vector&lt;int&gt; &gt; conv2(std::vector&lt;std::vector&lt;int&gt; &gt; filter, std::vector&lt;std::vector&lt;int&gt; &gt; mat);//向量版本\n\n\nint main(void)\n{\n    return 0;\n}//main\n\nvoid conv2(int** filter, int **mat, int** res, const int filter_rows, const int filter_cols, const int mat_rows, const int mat_cols)\n{\n    assert(filter_cols &lt; mat_cols &amp;&amp; filter_rows &lt; mat_rows);\n    for(int i = 0; i &lt; mat_rows - 1; ++i)\n        for (int j = 0; j &lt; mat_cols - 1; ++j)\n        {\n            int tmp = 0;\n            for (int m = 0; m &lt; filter_rows; ++m)\n                for (int n = 0; n &lt; filter_cols; ++n)\n                    if(0 &lt;= i -m  &amp;&amp; i - m &lt; mat_rows &amp;&amp; 0 &lt;= j - n &amp;&amp; j - n &lt; mat_cols)\n                        tmp += filter[m][n] * mat[i - m][j - n];//卷积公式\n\n            res[i][j] = tmp;\n        }\n}\n\nstd::vector&lt;std::vector&lt;int&gt; &gt; conv2(std::vector&lt;std::vector&lt;int&gt; &gt; filter, std::vector&lt;std::vector&lt;int&gt; &gt; mat )//向量版本\n{\n    const int filter_rows = filter.size();\n    const int filter_cols = filter[0].size();\n\n    const int mat_rows = mat.size();\n    const int mat_cols = mat[0].size();\n\n    assert(filter_cols &lt; mat_cols &amp;&amp; filter_rows &lt; mat_rows);\n    std::vector&lt;std::vector&lt;int&gt; &gt; res(mat_rows, std::vector&lt;int&gt;(mat_cols, 0));\n\n    for (int i = 0; i &lt; mat_rows - 1; ++i)\n        for (int j = 0; j &lt; mat_cols - 1; ++j)\n        {\n            int tmp = 0;\n            for (int m = 0; m &lt; filter_rows; ++m)\n                for (int n = 0; n &lt; filter_cols; ++n)\n                    if (0 &lt;= i - m &amp;&amp; i - m &lt; mat_rows &amp;&amp; 0 &lt;= j - n &amp;&amp; j - n &lt; mat_cols)\n                        tmp += filter[m][n] * mat[i - m][j - n];//卷积公式\n\n            res[i][j] = tmp;\n        }\n    return res;\n}<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"pooling\">4. Pooling</h4>\n<h5 id=\"maxpooling\">maxpooling</h5>\n<h6 id=\"版本1简单版\">版本1(简单版)</h6>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">def max_pooling(x, kernel_size=2, stride=2):\n    b, c_in, h, w = x.shape\n    ow = (w - kernel_size) // stride + 1\n    oh = (h - kernel_size) // stride + 1\n\n    out = np.zeros([b, c_in, oh, ow])\n    x_input = x\n    for y in range(oh):\n        for x in range(ow):\n            roi = x_input[..., y * stride: y * stride + kernel_size, x * stride: x * stride + kernel_size]\n            max_val = np.squeeze(np.max(roi, axis=(2, 3), keepdims=True), axis=(2, 3))\n            out[..., y, x] = max_val\n    return out<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h6 id=\"版本2反向传播\">版本2(反向传播)</h6>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">import numpy as np\nimport torch\nclass MaxPooling2D:\n    def __init__(self, kernel_size=(2, 2), stride=2):\n        self.kernel_size = kernel_size\n        self.w_height = kernel_size[0]\n        self.w_width = kernel_size[1]\n\n        self.stride = stride\n\n        self.x = None\n        self.in_height = None\n        self.in_width = None\n\n        self.out_height = None\n        self.out_width = None\n\n        self.arg_max = None\n\n    def __call__(self, x):\n        self.x = x\n        self.in_height = np.shape(x)[0]\n        self.in_width = np.shape(x)[1]\n\n        self.out_height = int((self.in_height - self.w_height) / self.stride) + 1\n        self.out_width = int((self.in_width - self.w_width) / self.stride) + 1\n\n        out = np.zeros((self.out_height, self.out_width))\n        self.arg_max = np.zeros_like(out, dtype=np.int32)\n\n        for i in range(self.out_height):\n            for j in range(self.out_width):\n                start_i = i * self.stride\n                start_j = j * self.stride\n                end_i = start_i + self.w_height\n                end_j = start_j + self.w_width\n                out[i, j] = np.max(x[start_i: end_i, start_j: end_j])\n                self.arg_max[i, j] = np.argmax(x[start_i: end_i, start_j: end_j])\n        self.arg_max = self.arg_max\n        return out\n\n    def backward(self, d_loss):\n        dx = np.zeros_like(self.x)\n        for i in range(self.out_height):\n            for j in range(self.out_width):\n                start_i = i * self.stride\n                start_j = j * self.stride\n                end_i = start_i + self.w_height\n                end_j = start_j + self.w_width\n                index = np.unravel_index(self.arg_max[i, j], self.kernel_size)\n                dx[start_i:end_i, start_j:end_j][index] = d_loss[i, j] #\n        return dx<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li>test</li>\n</ul>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">np.set_printoptions(precision=8, suppress=True, linewidth=120)\nx_numpy = np.random.random((1, 1, 6, 9))\nx_tensor = torch.tensor(x_numpy, requires_grad=True)\n\nmax_pool_tensor = torch.nn.MaxPool2d((2, 2), 2)\nmax_pool_numpy = MaxPooling2D((2, 2), stride=2)\n\nout_numpy = max_pool_numpy(x_numpy[0, 0])\nout_tensor = max_pool_tensor(x_tensor)\n\nd_loss_numpy = np.random.random(out_tensor.shape)\nd_loss_tensor = torch.tensor(d_loss_numpy, requires_grad=True)\nout_tensor.backward(d_loss_tensor)\n\ndx_numpy = max_pool_numpy.backward(d_loss_numpy[0, 0])\ndx_tensor = x_tensor.grad\n# print('input \\n', x_numpy)\nprint(\"out_numpy \\n\", out_numpy)\nprint(\"out_tensor \\n\", out_tensor.data.numpy())\n\nprint(\"dx_numpy \\n\", dx_numpy)\nprint(\"dx_tensor \\n\", dx_tensor.data.numpy())<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">def pooling(feature_map, size=2, stride=2):\n    channel=feature_map.shape[0]\n    height=feature_map.shape[1]\n    width=feature_map.shape[2]\n    padding_height=np.uint16(round((height-size+1)/stride))\n    padding_width=np.uint16(round((width-size+1)/stride))\n    print(padding_height,padding_width)\n\n    pool_out = np.zeros((channel,padding_height,padding_width),dtype=np.uint8)\n    \n    for map_num in range(channel):  \n        out_height = 0  \n        for r in np.arange(0,height, stride):  \n            out_width = 0  \n            for c in np.arange(0, width, stride):  \n                pool_out[map_num,out_height, out_width] = np.max(feature_map[map_num,r:r+size,c:c+size])  \n                out_width=out_width+1\n            out_height=out_height+1\n    return pool_out<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h5 id=\"avg-pooling\">avg-pooling</h5>\n<h6 id=\"版本1简单版-1\">版本1(简单版)</h6>\n<p>def avg_pooling(x, kernel_size=2, stride=2): b, c_in, h, w = x.shape ow = (w - kernel_size) // stride + 1 oh = (h - kernel_size) // stride + 1</p>\n<pre><code>out = np.zeros([b, c_in, oh, ow])\nx_input = x\nfor y in range(oh):\n    for x in range(ow):\n        roi = x_input[..., y * stride: y * stride + kernel_size, x * stride: x * stride + kernel_size]\n        max_val = np.average(roi, axis=(2, 3))\n        out[..., y, x] = max_val\nreturn out</code></pre>\n<h6 id=\"版本2反向传播-1\">版本2(反向传播)</h6>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">import numpy as np\nimport torch\n\nclass AvgPooling2D:\n    def __init__(self, kernel_size=(2, 2), stride=2):\n        self.stride = stride\n        self.kernel_size = kernel_size\n        self.w_height = kernel_size[0]\n        self.w_width = kernel_size[1]\n\n    def __call__(self, x):\n        self.x = x\n        self.in_height = x.shape[0]\n        self.in_width = x.shape[1]\n\n        self.out_height = int((self.in_height - self.w_height) / self.stride) + 1\n        self.out_width = int((self.in_width - self.w_width) / self.stride) + 1\n        out = np.zeros((self.out_height, self.out_width))\n\n        for i in range(self.out_height):\n            for j in range(self.out_width):\n                start_i = i * self.stride\n                start_j = j * self.stride\n                end_i = start_i + self.w_height\n                end_j = start_j + self.w_width\n                out[i, j] = np.mean(x[start_i: end_i, start_j: end_j])\n        return out\n\n    def backward(self, d_loss):\n        dx = np.zeros_like(self.x)\n\n        for i in range(self.out_height):\n            for j in range(self.out_width):\n                start_i = i * self.stride\n                start_j = j * self.stride\n                end_i = start_i + self.w_height\n                end_j = start_j + self.w_width\n                dx[start_i: end_i, start_j: end_j] = d_loss[i, j] / (self.w_width * self.w_height)\n        return dx\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li>test</li>\n</ul>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">np.set_printoptions(precision=8, suppress=True, linewidth=120)\nx_numpy = np.random.random((1, 1, 6, 9))\nx_tensor = torch.tensor(x_numpy, requires_grad=True)\n\navg_pool_tensor = torch.nn.AvgPool2d((2, 2), 2)\navg_pool_numpy = AvgPooling2D((2, 2), stride=2)\n\nout_numpy = avg_pool_numpy(x_numpy[0, 0])\nout_tensor = avg_pool_tensor(x_tensor)\n\nd_loss_numpy = np.random.random(out_tensor.shape)\nd_loss_tensor = torch.tensor(d_loss_numpy, requires_grad=True)\nout_tensor.backward(d_loss_tensor)\n\ndx_numpy = avg_pool_numpy.backward(d_loss_numpy[0, 0])\ndx_tensor = x_tensor.grad\n# print('input \\n', x_numpy)\nprint(\"out_numpy \\n\", out_numpy)\nprint(\"out_tensor \\n\", out_tensor.data.numpy())\n\nprint(\"dx_numpy \\n\", dx_numpy)\nprint(\"dx_tensor \\n\", dx_tensor.data.numpy())<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"map\">5. mAP</h4>\n<h5 id=\"python-3\">python</h5>\n<h5 id=\"c-3\">c++</h5>\n<h4 id=\"softnms\">6. softnms</h4>\n<h5 id=\"python-4\">python</h5>\n<h6 id=\"版本1\">版本1</h6>\n<h1 id=\"soft_nms操作这里假设boxes是无序未按score做降序的所以每轮soft_nms迭代都需要类似冒泡排序操作选择当前top-1-bbox做nms\">soft_nms操作，这里假设boxes是无序(未按score做降序)的，所以每轮soft_nms迭代都需要类似冒泡排序操作，选择当前top-1 bbox做NMS</h1>\n<h1 id=\"nt计算iou的阈值iou-nt对应bbox的score权重就要降低\">Nt：计算IoU的阈值，IoU &gt; Nt，对应bbox的score权重就要降低</h1>\n<h1 id=\"threshold降权后通过threshold进一步剔除低权重bbox\">threshold：降权后通过threshold进一步剔除低权重bbox</h1>\n<p>def cpu_soft_nms(boxes, sigma=0.5, Nt=0.3, threshold=0.001, method=0): N = boxes.shape[0] for i in range(N): maxscore = boxes[i, 4] # 获取当前index下的bbox maxpos = i</p>\n<pre><code>    tx1 = boxes[i, 0]\n    ty1 = boxes[i, 1]\n    tx2 = boxes[i, 2]\n    ty2 = boxes[i, 3]\n    ts = boxes[i, 4]\n\n    pos = i + 1  # 下面操作就很常规了，找到当前index i之后所有bboxes中，score最大的bbox，并将之赋值给maxscore、maxpos\n    while pos &lt; N:\n        if maxscore &lt; boxes[pos, 4]:\n            maxscore = boxes[pos, 4]\n            maxpos = pos\n        pos = pos + 1\n\n    # 下面操作更简单，想想我们最开始学C语言，a、b两变量如何交换\n    # add max box as a detection\n    boxes[i, 0] = boxes[maxpos, 0]  # maxpos内的信息，放到index i处，也是当前需要处理的bbox\n    boxes[i, 1] = boxes[maxpos, 1]\n    boxes[i, 2] = boxes[maxpos, 2]\n    boxes[i, 3] = boxes[maxpos, 3]\n    boxes[i, 4] = boxes[maxpos, 4]\n\n    # swap ith box with position of max box\n    boxes[maxpos, 0] = tx1  # 别忘了tx1中可是保存了boxes[i,0]备份的\n    boxes[maxpos, 1] = ty1\n    boxes[maxpos, 2] = tx2\n    boxes[maxpos, 3] = ty2\n    boxes[maxpos, 4] = ts\n\n    tx1 = boxes[i, 0]  # 此时tx1就保存的maxpos位置的bbox信息了\n    ty1 = boxes[i, 1]\n    tx2 = boxes[i, 2]\n    ty2 = boxes[i, 3]\n    ts = boxes[i, 4]\n\n    pos = i + 1\n    # NMS iterations, note that N changes if detection boxes fall below threshold，N值是动态变化的\n    while pos &lt; N:  # 向后做NMS比较\n        x1 = boxes[pos, 0]  # 当前位置的bbox\n        y1 = boxes[pos, 1]\n        x2 = boxes[pos, 2]\n        y2 = boxes[pos, 3]\n        s = boxes[pos, 4]\n\n        area = (x2 - x1 + 1) * (y2 - y1 + 1)  # pos下box的面积\n        iw = (min(tx2, x2) - max(tx1, x1) + 1)  # 计算Insection的宽iw，如果iw &lt; 0，说明没相交，可以直接忽略了\n        if iw &gt; 0:\n            ih = (min(ty2, y2) - max(ty1, y1) + 1)  # 计算Insection的宽ih，如果ih &lt; 0，说明没相交，可以直接忽略了\n            if ih &gt; 0:\n                ua = float((tx2 - tx1 + 1) * (ty2 - ty1 + 1) + area - iw * ih)  # U的面积\n                ov = iw * ih / ua  # iou between max box and detection box\n\n                if method == 1:  # soft_nms中linear降权操作，与ov负相关\n                    if ov &gt; Nt:\n                        weight = 1 - ov\n                    else:\n                        weight = 1\n                elif method == 2:  # soft_nms中gaussian降权操作\n                    weight = np.exp(-(ov * ov) / sigma)\n                else:  # original NMS，weight = 0就直接把score置0\n                    if ov &gt; Nt:\n                        weight = 0\n                    else:\n                        weight = 1\n\n                boxes[pos, 4] = weight * boxes[pos, 4]  # 权重重新调整\n\n                # if box score falls below threshold, discard the box by swapping with last box，update N\n                # 如果bbox调整后的权重，已经小于阈值threshold，那么这个bbox就可以忽略了，\n                # 操作方式是直接用最后一个有效的bbox替换当前pos上的bbox\n                if boxes[pos, 4] &lt; threshold:\n                    boxes[pos, 0] = boxes[N - 1, 0]\n                    boxes[pos, 1] = boxes[N - 1, 1]\n                    boxes[pos, 2] = boxes[N - 1, 2]\n                    boxes[pos, 3] = boxes[N - 1, 3]\n                    boxes[pos, 4] = boxes[N - 1, 4]\n                    N = N - 1  # N-1位置上的bbox已经赋值到前面了，该bbox就可以忽略了；\n                    pos = pos - 1  # pos位置上引入了新的有效bbox(N-1)，就需要再计算一遍了\n\n        pos = pos + 1  # 当前pos bbox计算完毕\n\n# 求满足soft_nms筛选条件的所有bbox数量，并打散为list，但一个问题是：如何与bbox index对应起来？\n# 方式很简单，bbox也做了对应的调整、筛选，bbox list中top-N就对应着最高score，且soft-nms筛选通过的bbox，\n# 不过每个bbox的score也同样经过soft-nms调整了\nkeep = [i for i in range(N)]\n\nreturn keep</code></pre>\n<h6 id=\"版本2\">版本2</h6>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">def py_cpu_softnms(dets, sc, Nt=0.3, sigma=0.5, thresh=0.001, method=2):\n    \"\"\"\n    py_cpu_softnms\n    :param dets:   boexs 坐标矩阵 format [y1, x1, y2, x2]\n    :param sc:     每个 boxes 对应的分数\n    :param Nt:     iou 交叠门限\n    :param sigma:  使用 gaussian 函数的方差\n    :param thresh: 最后的分数门限\n    :param method: 使用的方法\n    :return:       留下的 boxes 的 index\n    \"\"\"\n\n    # indexes concatenate boxes with the last column\n    N = dets.shape[0]\n    indexes = np.array([np.arange(N)])\n    dets = np.concatenate((dets, indexes.T), axis=1)\n\n    # the order of boxes coordinate is [y1,x1,y2,x2]\n    y1 = dets[:, 0]\n    x1 = dets[:, 1]\n    y2 = dets[:, 2]\n    x2 = dets[:, 3]\n    scores = sc\n    areas = (x2 - x1 + 1) * (y2 - y1 + 1)\n\n    for i in range(N):\n        # intermediate parameters for later parameters exchange\n        tBD = dets[i, :].copy()\n        tscore = scores[i].copy()\n        tarea = areas[i].copy()\n        pos = i + 1\n\n        #\n        if i != N-1:\n            maxscore = np.max(scores[pos:], axis=0)\n            maxpos = np.argmax(scores[pos:], axis=0)\n        else:\n            maxscore = scores[-1]\n            maxpos = 0\n        if tscore &lt; maxscore:\n            dets[i, :] = dets[maxpos + i + 1, :]\n            dets[maxpos + i + 1, :] = tBD\n            tBD = dets[i, :]\n\n            scores[i] = scores[maxpos + i + 1]\n            scores[maxpos + i + 1] = tscore\n            tscore = scores[i]\n\n            areas[i] = areas[maxpos + i + 1]\n            areas[maxpos + i + 1] = tarea\n            tarea = areas[i]\n\n        # IoU calculate\n        xx1 = np.maximum(dets[i, 1], dets[pos:, 1])\n        yy1 = np.maximum(dets[i, 0], dets[pos:, 0])\n        xx2 = np.minimum(dets[i, 3], dets[pos:, 3])\n        yy2 = np.minimum(dets[i, 2], dets[pos:, 2])\n\n        w = np.maximum(0.0, xx2 - xx1 + 1)\n        h = np.maximum(0.0, yy2 - yy1 + 1)\n        inter = w * h\n        ovr = inter / (areas[i] + areas[pos:] - inter)\n\n        # Three methods: 1.linear 2.gaussian 3.original NMS\n        if method == 1:  # linear\n            weight = np.ones(ovr.shape)\n            weight[ovr &gt; Nt] = weight[ovr &gt; Nt] - ovr[ovr &gt; Nt]\n        elif method == 2:  # gaussian\n            weight = np.exp(-(ovr * ovr) / sigma)\n        else:  # original NMS\n            weight = np.ones(ovr.shape)\n            weight[ovr &gt; Nt] = 0\n\n        scores[pos:] = weight * scores[pos:]\n\n    # select the boxes and keep the corresponding indexes\n    inds = dets[:, 4][scores &gt; thresh]\n    keep = inds.astype(int)\n\n    return keep<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">def test():\n    # boxes and scores\n    boxes = np.array([[200, 200, 400, 400], [220, 220, 420, 420], [200, 240, 400, 440], [240, 200, 440, 400], [1, 1, 2, 2]], dtype=np.float32)\n    boxscores = np.array([0.9, 0.8, 0.7, 0.6, 0.5], dtype=np.float32)\n    index = py_cpu_softnms(boxes, boxscores, method=3)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h5 id=\"c-4\">c++</h5>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">\n#include &lt;bits/stdc++.h&gt;\n\nnamespace nms\n{\nstruct proposal\n{\n  float score, x1, y1, x2, y2;\n};\n\ninline static bool cmp(const proposal&amp; a, const proposal&amp; b)\n{\n  return a.score &lt; b.score;\n}\n\ninline static float iou(const proposal&amp;, const proposal&amp;) __attribute__((always_inline));\n\nstatic float iou(const proposal&amp; a, const proposal&amp; b)\n{\n  auto overlap = 0.f;\n  float iw  = std::min(b.x2, a.x2) - std::max(b.x1, a.x1) + 1;\n  if (iw &gt; 0) {\n    float ih = std::min(b.y2, a.y2) - std::max(b.y1, a.y1) + 1;\n    if (ih &gt; 0) {\n      float ab = (b.x2 - b.x1 + 1) * (b.y2 - b.y1 + 1);\n      float aa = (a.x2 - a.x1 + 1) * (a.y2 - a.y1 + 1);\n      float inter = iw * ih;\n      overlap = inter / (aa + ab - inter);\n    }\n  }\n  return overlap;\n}\n\nenum class Method : uint32_t\n{\n  LINEAR = 0,\n  GAUSSIAN,\n  HARD\n};\n\nsize_t soft_nms(float* boxes,\n                int32_t* index,\n                size_t count,\n                Method method,\n                float Nt,\n                float sigma,\n                float threshold)\n{\n  std::iota(index, index + count, 0);  // np.arange()\n  auto p = reinterpret_cast&lt;proposal*&gt;(boxes);\n\n  auto N = count;\n  for (size_t i = 0; i &lt; N; ++i) {\n    auto max = std::max_element(p + i, p + N, cmp);\n    std::swap(p[i], *max);\n    std::swap(index[i], index[max - p]);\n\n    auto j      = i + 1;\n    auto weight = 0.f;\n    while (j &lt; N) {\n      auto ov = iou(p[i], p[j]);\n      switch (method) {\n        case Method::LINEAR:\n          weight = ov &gt; Nt ? 1.f - ov : 1.f;\n          break;\n        case Method::GAUSSIAN:\n          weight = std::exp(-(ov * ov) / sigma);\n          break;\n        case Method::HARD:\n          weight = ov &gt; Nt ? 0.f : 1.f;\n          break;\n      }\n      p[j].score *= weight;\n      if (p[j].score &lt; threshold) {\n        N--;\n        std::swap(p[j], p[N]);\n        std::swap(index[j], index[N]);\n        j--;\n      }\n      j++;\n    }\n  };\n\n  return N;\n}\n} /* namespace nms */\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"实现one-hot特征\">7. 实现one-hot特征</h4>\n<h5 id=\"python-5\">python</h5>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">one_hot_t= np.zeros_like(y)  #生成和y形状一样的元素为零的数组\nfor j, i in zip(range(t.size), t):\n    #有多少个样本就应该对应多少个标签\n    one_hot_t[j][i] = 1      #变为one-hot类型标签：j表示样本，i表示标签索引\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"softmax\">8. softmax</h4>\n<h5 id=\"python-6\">python</h5>\n<p>由于指数函数的放大作用过于明显，如果直接使用softmax计算公式𝑠𝑜𝑓𝑡𝑚𝑎𝑥(𝑥𝑖)=𝑒𝑥𝑝(𝑥𝑖)/∑𝑒𝑥𝑝(𝑥𝑗)进行函数实现，容易导致数据溢出(上溢)。所以我们在函数实现时利用其性质：先对输入数据进行处理，之后再利用计算公式计算。具体使得实现步骤为： 查找每个向量x的最大值c； 每个向量减去其最大值c, 得到向量y = x-c; 利用公式进行计算,softmax(x) = softmax(x-c) = softmax(y)</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">import numpy as np\n\ndef softmax(x: np.array):\n    x_max = np.max(x, axis=-1, keepdims=True)\n    x -= x_max\n    x_exp = np.exp(x)\n    s = x_exp / np.sum(x_exp, axis=-1, keepdims=True)\n    return s\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"各种滤波\">9. 各种滤波</h4>\n<h5 id=\"马赛克\">马赛克</h5>\n<p>马赛克的实现原理是把图像上某个像素点一定范围邻域内的所有点用邻域内左上像素点的颜色代替，这样可以模糊细节，但是可以保留大体的轮廓。 <pre class=\"line-numbers language-none\"><code class=\"language-none\">import cv2\n\ndef do_mosaic(frame, x, y, w, h, neighbor=9):\n    \"\"\"\n    :param frame: opencv frame\n    :param int x :  马赛克左顶点\n    :param int y:  马赛克右顶点\n    :param int w:  马赛克宽\n    :param int h:  马赛克高\n    :param int neighbor:  马赛克每一块的宽\n    \"\"\"\n    fh, fw = frame.shape[0], frame.shape[1]\n    if (y + h &gt; fh) or (x + w &gt; fw):\n        return\n    for i in range(0, h - neighbor, neighbor):  # 关键点0 减去neightbour 防止溢出\n        for j in range(0, w - neighbor, neighbor):\n            rect = [j + x, i + y, neighbor, neighbor]\n            color = frame[i + y][j + x].tolist()  # 关键点1 tolist\n            left_up = (rect[0], rect[1])\n            right_down = (rect[0] + neighbor - 1, rect[1] + neighbor - 1)  # 关键点2 减去一个像素\n            cv2.rectangle(frame, left_up, right_down, color, -1)\n\n\nim = cv2.imread('test.jpg', 1)\ndo_mosaic(im, 219, 61, 460 - 219, 412 - 61)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n<h5 id=\"高斯滤波\">高斯滤波</h5>\n<p><a href=\"https://www.cnblogs.com/wojianxin/p/12498391.html\">出处</a></p>\n<figure>\n<img src=\"https://img-blog.csdn.net/20171203094927312\" alt=\"二维高斯函数\"><figcaption aria-hidden=\"true\">二维高斯函数</figcaption>\n</figure>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">import cv2\nimport numpy as np\n\ndef gaussian_filter(img, K_size=3, sigma=1.3):\n\n    if len(img.shape) == 3:\n        H, W, C = img.shape\n    else:\n        img = np.expand_dims(img, axis=-1)\n        H, W, C = img.shape\n\n    ## Zero padding\n    pad = K_size // 2\n    out = np.zeros((H + pad * 2, W + pad * 2, C), dtype=np.float)\n    out[pad: pad + H, pad: pad + W] = img.copy().astype(np.float)\n\n    ## prepare Kernel\n    K = np.zeros((K_size, K_size), dtype=np.float)\n    for x in range(-pad, -pad + K_size):\n        for y in range(-pad, -pad + K_size):\n            K[y + pad, x + pad] = np.exp( -(x ** 2 + y ** 2) / (2 * (sigma ** 2)))\n\n    K /= (2 * np.pi * sigma * sigma)\n    K /= K.sum()\n    tmp = out.copy()\n\n    # filtering\n    for y in range(H):\n        for x in range(W):\n            for c in range(C):\n                out[pad + y, pad + x, c] = np.sum(K * tmp[y: y + K_size, x: x + K_size, c])\n\n    out = np.clip(out, 0, 255)\n    out = out[pad: pad + H, pad: pad + W].astype(np.uint8)\n    return out\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h5 id=\"均值滤波\">均值滤波</h5>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">import numpy as np\n\n\ndef means_filter(input_image, filter_size):\n    '''\n    均值滤波器\n    :param input_image: 输入图像\n    :param filter_size: 滤波器大小\n    :return: 输出图像\n\n    注：此实现滤波器大小必须为奇数且 &gt;= 3\n    '''\n    input_image_cp = np.copy(input_image)  # 输入图像的副本\n    filter_template = np.ones((filter_size, filter_size))  # 空间滤波器模板\n    pad_num = int((filter_size - 1) / 2)  # 输入图像需要填充的尺寸\n    input_image_cp = np.pad(input_image_cp, (pad_num, pad_num), mode=\"constant\", constant_values=0)  # 填充输入图像\n    m, n = input_image_cp.shape  # 获取填充后的输入图像的大小\n    output_image = np.copy(input_image_cp)  # 输出图像\n\n    # 空间滤波\n    for i in range(pad_num, m - pad_num):\n        for j in range(pad_num, n - pad_num):\n            output_image[i, j] = np.sum(filter_template * input_image_cp[i - pad_num:i + pad_num + 1, j - pad_num:j + pad_num + 1]) / (filter_size ** 2)\n    output_image = output_image[pad_num:m - pad_num, pad_num:n - pad_num]  # 裁剪\n\n    return output_image<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h5 id=\"中值滤波\">中值滤波</h5>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\"># 中值滤波#\nimport cv2\nimport numpy as np\n\ndef MedianFilter(img,k=3,padding=None):\n    imarray=img\n    height = imarray.shape[0]\n    width = imarray.shape[1]\n    if not padding:\n        edge = int((k - 1) / 2)\n        if height - 1 - edge &lt;= edge or width - 1 - edge &lt;= edge:\n            print(\"The parameter k is to large.\")\n            return None\n        new_arr = np.zeros((height, width), dtype=\"uint8\")\n        for i in range(edge,height-edge):\n            for j in range(edge,width-edge):\n                new_arr[i, j] = np.median(imarray[i - edge:i + edge + 1, j - edge:j + edge + 1])# 调用np.median求取中值\n    return new_arr\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"kmeans\">Kmeans</h4>\n<p>https://zhuanlan.zhihu.com/p/35959301 #### 积分图均值滤波 https://blog.csdn.net/weixin_40647819/article/details/88775598</p>\n","text":"1. IOU python def bb_intersection_over_union(boxA, boxB): boxA = [int(x) for x in boxA] boxB = [int(x) for x in boxB] xA = max(boxA[0], boxB...","link":"","photos":[],"count_time":{"symbolsCount":"25k","symbolsTime":"23 mins."},"categories":[],"tags":[{"name":"interview summary","slug":"interview-summary","count":2,"path":"api/tags/interview-summary.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#iou\"><span class=\"toc-text\">1. IOU</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#python\"><span class=\"toc-text\">python</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#c\"><span class=\"toc-text\">c++</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#nms\"><span class=\"toc-text\">2. NMS</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#python-1\"><span class=\"toc-text\">python</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#c-1\"><span class=\"toc-text\">c++</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%8D%B7%E7%A7%AF\"><span class=\"toc-text\">3. 卷积</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#python-2\"><span class=\"toc-text\">python</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#c-2\"><span class=\"toc-text\">c++</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#pooling\"><span class=\"toc-text\">4. Pooling</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#maxpooling\"><span class=\"toc-text\">maxpooling</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#%E7%89%88%E6%9C%AC1%E7%AE%80%E5%8D%95%E7%89%88\"><span class=\"toc-text\">版本1(简单版)</span></a></li><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#%E7%89%88%E6%9C%AC2%E5%8F%8D%E5%90%91%E4%BC%A0%E6%92%AD\"><span class=\"toc-text\">版本2(反向传播)</span></a></li></ol></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#avg-pooling\"><span class=\"toc-text\">avg-pooling</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#%E7%89%88%E6%9C%AC1%E7%AE%80%E5%8D%95%E7%89%88-1\"><span class=\"toc-text\">版本1(简单版)</span></a></li><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#%E7%89%88%E6%9C%AC2%E5%8F%8D%E5%90%91%E4%BC%A0%E6%92%AD-1\"><span class=\"toc-text\">版本2(反向传播)</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#map\"><span class=\"toc-text\">5. mAP</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#python-3\"><span class=\"toc-text\">python</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#c-3\"><span class=\"toc-text\">c++</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#softnms\"><span class=\"toc-text\">6. softnms</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#python-4\"><span class=\"toc-text\">python</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#%E7%89%88%E6%9C%AC1\"><span class=\"toc-text\">版本1</span></a></li></ol></li></ol></li></ol></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#soft_nms%E6%93%8D%E4%BD%9C%E8%BF%99%E9%87%8C%E5%81%87%E8%AE%BEboxes%E6%98%AF%E6%97%A0%E5%BA%8F%E6%9C%AA%E6%8C%89score%E5%81%9A%E9%99%8D%E5%BA%8F%E7%9A%84%E6%89%80%E4%BB%A5%E6%AF%8F%E8%BD%AEsoft_nms%E8%BF%AD%E4%BB%A3%E9%83%BD%E9%9C%80%E8%A6%81%E7%B1%BB%E4%BC%BC%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F%E6%93%8D%E4%BD%9C%E9%80%89%E6%8B%A9%E5%BD%93%E5%89%8Dtop-1-bbox%E5%81%9Anms\"><span class=\"toc-text\">soft_nms操作，这里假设boxes是无序(未按score做降序)的，所以每轮soft_nms迭代都需要类似冒泡排序操作，选择当前top-1 bbox做NMS</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#nt%E8%AE%A1%E7%AE%97iou%E7%9A%84%E9%98%88%E5%80%BCiou-nt%E5%AF%B9%E5%BA%94bbox%E7%9A%84score%E6%9D%83%E9%87%8D%E5%B0%B1%E8%A6%81%E9%99%8D%E4%BD%8E\"><span class=\"toc-text\">Nt：计算IoU的阈值，IoU &gt; Nt，对应bbox的score权重就要降低</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#threshold%E9%99%8D%E6%9D%83%E5%90%8E%E9%80%9A%E8%BF%87threshold%E8%BF%9B%E4%B8%80%E6%AD%A5%E5%89%94%E9%99%A4%E4%BD%8E%E6%9D%83%E9%87%8Dbbox\"><span class=\"toc-text\">threshold：降权后通过threshold进一步剔除低权重bbox</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#%E7%89%88%E6%9C%AC2\"><span class=\"toc-text\">版本2</span></a></li></ol></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#c-4\"><span class=\"toc-text\">c++</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%AE%9E%E7%8E%B0one-hot%E7%89%B9%E5%BE%81\"><span class=\"toc-text\">7. 实现one-hot特征</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#python-5\"><span class=\"toc-text\">python</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#softmax\"><span class=\"toc-text\">8. softmax</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#python-6\"><span class=\"toc-text\">python</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%90%84%E7%A7%8D%E6%BB%A4%E6%B3%A2\"><span class=\"toc-text\">9. 各种滤波</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E9%A9%AC%E8%B5%9B%E5%85%8B\"><span class=\"toc-text\">马赛克</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E9%AB%98%E6%96%AF%E6%BB%A4%E6%B3%A2\"><span class=\"toc-text\">高斯滤波</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%9D%87%E5%80%BC%E6%BB%A4%E6%B3%A2\"><span class=\"toc-text\">均值滤波</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E4%B8%AD%E5%80%BC%E6%BB%A4%E6%B3%A2\"><span class=\"toc-text\">中值滤波</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#kmeans\"><span class=\"toc-text\">Kmeans</span></a></li></ol>","author":{"name":"Hulk Wang","slug":"blog-author","avatar":"/images/avatar_small.jpg","link":"https://github.com/TalkUHulk","description":"学习、记录、总结<br />kill拖延症<br /> 不生产知识，只是知识的搬运工<br /> <img src=\"/images/funny.gif\" height=\"240\" width=\"360\"/>","socials":{"github":"https://github.com/TalkUHulk","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/311127773","zhihu":"https://www.zhihu.com/people/MisterAntebellum","csdn":"https://blog.csdn.net/hyqwmxsh","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"无监督对比学习(Contrastive LearningOC)","uid":"84b6109cde20e5bfc02c6af7734d88cb","slug":"无监督对比学习-Contrastive-LearningOC","date":"2021-11-02T03:39:11.000Z","updated":"2021-11-03T11:00:42.159Z","comments":true,"path":"api/articles/无监督对比学习-Contrastive-LearningOC.json","keywords":null,"cover":"/images/contrastive/cl.jpg","text":" 推荐阅读 对比学习 原理: 输入N个图片，用不同的数据增强方法为每个图片生成两个view，分别对它们编码得到y和y'。我们对上下两批表示两两计算cosine，得到NxN的矩阵，每一行的对角线位置代表y和y'的相似度，其余代表y和N-1个负例的相似度。 对每一行做softmax分...","link":"","photos":[],"count_time":{"symbolsCount":"2.6k","symbolsTime":"2 mins."},"categories":[],"tags":[{"name":"work summary","slug":"work-summary","count":5,"path":"api/tags/work-summary.json"}],"author":{"name":"Hulk Wang","slug":"blog-author","avatar":"/images/avatar_small.jpg","link":"https://github.com/TalkUHulk","description":"学习、记录、总结<br />kill拖延症<br /> 不生产知识，只是知识的搬运工<br /> <img src=\"/images/funny.gif\" height=\"240\" width=\"360\"/>","socials":{"github":"https://github.com/TalkUHulk","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/311127773","zhihu":"https://www.zhihu.com/people/MisterAntebellum","csdn":"https://blog.csdn.net/hyqwmxsh","juejin":"","customs":{}}}},"next_post":{"title":"CV面试基础总结","uid":"2d84f3892209cec11720cffbf464a897","slug":"CV面试基础总结","date":"2021-10-12T07:57:22.000Z","updated":"2021-11-09T11:00:39.862Z","comments":true,"path":"api/articles/CV面试基础总结.json","keywords":null,"cover":"/images/interview/FID_dis.jpg","text":"1. 评测指标 1.1 基本概念 1.1.1 TP TN FP FN T-Ture;F-False 表示预测结果的正确性，T表示预测正确，F表示预测错误； P-positive;N-negative 表示预测的正负性，P表示预测为正样本，N表示预测为负样本； --- --- TP...","link":"","photos":[],"count_time":{"symbolsCount":"45k","symbolsTime":"41 mins."},"categories":[],"tags":[{"name":"interview summary","slug":"interview-summary","count":2,"path":"api/tags/interview-summary.json"}],"author":{"name":"Hulk Wang","slug":"blog-author","avatar":"/images/avatar_small.jpg","link":"https://github.com/TalkUHulk","description":"学习、记录、总结<br />kill拖延症<br /> 不生产知识，只是知识的搬运工<br /> <img src=\"/images/funny.gif\" height=\"240\" width=\"360\"/>","socials":{"github":"https://github.com/TalkUHulk","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/311127773","zhihu":"https://www.zhihu.com/people/MisterAntebellum","csdn":"https://blog.csdn.net/hyqwmxsh","juejin":"","customs":{}}}}}